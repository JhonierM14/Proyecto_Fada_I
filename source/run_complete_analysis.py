#!/usr/bin/env python3
"""
Script principal para ejecutar el an√°lisis completo de complejidad computacional
"""

import os
import sys
import subprocess
import time

def ejecutar_comando(comando, descripcion):
    """Ejecuta un comando y muestra el progreso"""
    print(f"\n{'='*60}")
    print(f"EJECUTANDO: {descripcion}")
    print(f"Comando: {comando}")
    print(f"{'='*60}")
    
    inicio = time.time()
    try:
        resultado = subprocess.run(comando, shell=True, check=True, 
                                 capture_output=True, text=True)
        tiempo = time.time() - inicio
        print(f"‚úÖ Completado en {tiempo:.2f} segundos")
        if resultado.stdout:
            print("Salida:")
            print(resultado.stdout)
        return True
    except subprocess.CalledProcessError as e:
        tiempo = time.time() - inicio
        print(f"‚ùå Error despu√©s de {tiempo:.2f} segundos")
        print(f"Error: {e}")
        if e.stdout:
            print("Salida est√°ndar:")
            print(e.stdout)
        if e.stderr:
            print("Error est√°ndar:")
            print(e.stderr)
        return False

def verificar_dependencias():
    """Verifica que las dependencias necesarias est√©n instaladas"""
    print("Verificando dependencias...")
    
    dependencias = ['pandas', 'matplotlib', 'numpy']
    faltantes = []
    
    for dep in dependencias:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - NO INSTALADO")
            faltantes.append(dep)
    
    if faltantes:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {', '.join(faltantes)}")
        print("Instalando dependencias...")
        for dep in faltantes:
            comando = f"pip install {dep}"
            if not ejecutar_comando(comando, f"Instalando {dep}"):
                print(f"‚ùå No se pudo instalar {dep}")
                return False
    
    return True

def main():
    """Funci√≥n principal que ejecuta todo el an√°lisis"""
    
    print("üöÄ INICIANDO AN√ÅLISIS COMPLETO DE COMPLEJIDAD COMPUTACIONAL")
    print("=" * 60)
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists("source"):
        print("‚ùå Error: No se encontr√≥ el directorio 'source'")
        print("Ejecuta este script desde el directorio ra√≠z del proyecto")
        return False
    
    # Cambiar al directorio source
    os.chdir("source")
    
    # Verificar dependencias
    if not verificar_dependencias():
        print("‚ùå No se pudieron instalar las dependencias necesarias")
        return False
    
    # Paso 1: Generar datos de prueba m√°s grandes
    print("\nüìä PASO 1: Generando datos de prueba m√°s grandes...")
    if not ejecutar_comando("python generate_test_data.py", "Generando archivos de prueba"):
        return False
    
    # Paso 2: Ejecutar pruebas de rendimiento
    print("\n‚ö° PASO 2: Ejecutando pruebas de rendimiento...")
    if not ejecutar_comando("python run_performance_tests.py", "Ejecutando pruebas de rendimiento"):
        return False
    
    # Paso 3: Generar gr√°ficas
    print("\nüìà PASO 3: Generando gr√°ficas de an√°lisis...")
    if not ejecutar_comando("python generate_graphs.py", "Generando gr√°ficas"):
        return False
    
    # Verificar resultados
    print("\nüîç VERIFICANDO RESULTADOS...")
    archivos_esperados = [
        "resultados/punto4_merge_sort.csv",
        "resultados/punto8_insertion_sort.csv", 
        "resultados/punto12_insertion_sort.csv",
        "resultados/grafica_punto4.png",
        "resultados/grafica_punto8.png",
        "resultados/grafica_punto12.png",
        "resultados/grafica_comparativa.png"
    ]
    
    todos_existen = True
    for archivo in archivos_esperados:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - NO ENCONTRADO")
            todos_existen = False
    
    if todos_existen:
        print("\nüéâ ¬°AN√ÅLISIS COMPLETADO EXITOSAMENTE!")
        print("=" * 60)
        print("üìÅ Archivos generados en el directorio 'source/resultados/':")
        print("   ‚Ä¢ punto4_merge_sort.csv - Datos del Merge Sort")
        print("   ‚Ä¢ punto8_insertion_sort.csv - Datos del Insertion Sort (mediana)")
        print("   ‚Ä¢ punto12_insertion_sort.csv - Datos del Insertion Sort (consenso)")
        print("   ‚Ä¢ grafica_punto4.png - Gr√°fica Merge Sort vs O(n log n)")
        print("   ‚Ä¢ grafica_punto8.png - Gr√°fica Insertion Sort vs O(p¬≤)")
        print("   ‚Ä¢ grafica_punto12.png - Gr√°fica Insertion Sort vs O(p¬≤)")
        print("   ‚Ä¢ grafica_comparativa.png - Comparaci√≥n de los tres algoritmos")
        print("\nüìä Los datos CSV y gr√°ficas est√°n listos para incluir en el informe LaTeX")
        return True
    else:
        print("\n‚ùå ALGUNOS ARCHIVOS NO SE GENERARON CORRECTAMENTE")
        return False

if __name__ == "__main__":
    exito = main()
    sys.exit(0 if exito else 1) 